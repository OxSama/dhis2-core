version: "3.8"

services:
  web:
    image: "${DHIS2_IMAGE:-dhis2/core-dev:local}"
    ports:
      - 127.0.0.1:8080:8080 # DHIS2
      - 127.0.0.1:8081:8081 # Debugger: connect using commandline flag -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:8081
      - 127.0.0.1:9010:9010 # JMX port (for example for VisualVM)
    volumes:
      - ./docker/dhis.conf:/opt/dhis2/dhis.conf:ro
      - ./docker/log4j2.xml:/opt/dhis2/log4j2.xml:ro
    environment:
      JAVA_OPTS: "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:8081 \
              -Dlog4j2.configurationFile=/opt/dhis2/log4j2.xml
              -Dcom.sun.management.jmxremote \
              -Dcom.sun.management.jmxremote.port=9010 \
              -Dcom.sun.management.jmxremote.local.only=false \
              -Dcom.sun.management.jmxremote.authenticate=false \
              -Dcom.sun.management.jmxremote.ssl=false"
    depends_on:
      db:
        condition: service_healthy
      create-bucket:
        condition: service_completed_successfully

  db:
    image: ghcr.io/baosystems/postgis:12-3.3
    ports:
      - 127.0.0.1:5432:5432
    volumes:
      - db-dump:/docker-entrypoint-initdb.d/
    environment:
      POSTGRES_USER: dhis
      POSTGRES_DB: dhis
      POSTGRES_PASSWORD: &postgres_password dhis
      PGPASSWORD: *postgres_password # needed by psql in healthcheck
    healthcheck:
      test: [ "CMD-SHELL", "psql --no-password --quiet --username $$POSTGRES_USER postgres://127.0.0.1/$$POSTGRES_DB -p 5432 --command \"SELECT 'ok'\" > /dev/null" ]
      start_period: 120s
      interval: 1s
      timeout: 3s
      retries: 5
    depends_on:
      db-dump:
        condition: service_completed_successfully # make sure the DB dump has been downloaded

  db-dump:
    image: busybox # busybox wget version does not have --no-clobber, so we need to do the [ -f ] test
    command: sh -c '[ -f dump.sql.gz ] && echo "dump.sql.gz exists" || wget --output-document dump.sql.gz $$DHIS2_DB_DUMP_URL' # only download file if it does not exist
    environment:
      DHIS2_DB_DUMP_URL: "${DHIS2_DB_DUMP_URL:-https://databases.dhis2.org/sierra-leone/dev/dhis2-db-sierra-leone.sql.gz}"
    working_dir: /opt/dump
    volumes:
      - db-dump:/opt/dump

  minio:
    image: quay.io/minio/minio
    command: server /data --console-address ":9090"
    ports:
      - "9000:9000"
      - "9090:9090"
    volumes:
      - minio:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 5s
      timeout: 2s
      retries: 3
    environment:
      MINIO_ROOT_USER: root
      MINIO_ROOT_PASSWORD: dhisdhis

  ## Although buckets are created automatically, we want to create an unprivileged user with minimal access and use that. (Please change the passwords for production usage!)
  create-bucket:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    environment:
      MINIO_ROOT_USER: root
      MINIO_ROOT_PASSWORD: dhisdhis
      MINIO_USER: dhis
      MINIO_PASSWORD: dhisdhis
      S3_BUCKET: dhis2
    volumes:
      - ./docker/minio-IAM-policy.json:/dhis2/minio-IAM-policy.json
    entrypoint: >
      /bin/sh -c "
        mc config host add myminio http://minio:9000 $$MINIO_ROOT_USER $$MINIO_ROOT_PASSWORD
        mc ls myminio/$$S3_BUCKET || mc mb myminio/$$S3_BUCKET
        mc admin user info myminio $$MINIO_USER || mc admin user add myminio $$MINIO_USER $$MINIO_PASSWORD
        mc admin policy create myminio dhis2 /dhis2/minio-IAM-policy.json
        mc admin policy attach myminio dhis2 --user dhis
        exit 0"

volumes:
  db-dump: { }
  minio: { }
